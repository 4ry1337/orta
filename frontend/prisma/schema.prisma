// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
  MANAGER
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  accounts        Account[]
  role            Role      @default(USER)
  profile         Profile?
  follower_count  Int       @default(0)
  following_count Int       @default(0)
  approved_at     DateTime?
  deleted_at      DateTime?
  Device          Device[]
}

model Profile {
  id         Int      @id @default(autoincrement())
  bio        String
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  urls       String[]
  interests  String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Tag {
  id         Int       @id @default(autoincrement())
  lable      String    @unique
  article_count Int @default(0)
  tag_status TagStatus @default(WAITING)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

enum TagStatus {
  APPROVED
  BANNED
  WAITING
}

model Device {
  id             Int              @id @default(autoincrement())
  userId         String?
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  context        String?
  last_logged    DateTime         @default(now())
  ArticleVersion ArticleVersion[]
}

model Article {
  id             Int              @id @default(autoincrement())
  publisherId    String?
  userIds        String[]
  title          String?
  tag_list       String[]
  reference      Int[]
  like_count     Int              @default(0)
  comment_count  Int              @default(0)
  comments       Comment[]
  created_at     DateTime         @default(now())
  published_at   DateTime?
  updated_at     DateTime         @updatedAt
  ArticleVersion ArticleVersion[]
}

model ArticleVersion {
  id             Int      @id @default(autoincrement())
  article_id     Int
  device_id      Int?
  article        Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  device         Device?  @relation(fields: [device_id], references: [id], onDelete: SetNull)
  version_number Int      @default(0)
  content        String?
  updated_at     DateTime @updatedAt
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String?
  article    Article? @relation(fields: [article_id], references: [id])
  article_id Int?
}
