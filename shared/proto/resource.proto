syntax = "proto3";

package resource;

import "google/protobuf/timestamp.proto";

message User {
  string id = 1;
  string username = 2;
  string email = 3;
  optional google.protobuf.Timestamp email_verified = 4;
  optional string image = 5;
  Role role = 6;
  string bio = 7;
  repeated string urls = 8;
  int32 follower_count = 9;
  int32 following_count = 10;
  google.protobuf.Timestamp created_at = 11;
  optional google.protobuf.Timestamp approved_at = 12;
  optional google.protobuf.Timestamp deleted_at = 13;
}

message FullUser {
  string id = 1;
  string username = 2;
  string email = 3;
  optional google.protobuf.Timestamp email_verified = 4;
  optional string image = 5;
  string bio = 7;
  repeated string urls = 8;
  int32 follower_count = 9;
  int32 following_count = 10;
  google.protobuf.Timestamp created_at = 11;
  optional google.protobuf.Timestamp approved_at = 12;
  optional google.protobuf.Timestamp deleted_at = 13;
  optional bool followed = 14;
}

enum Role {
  USER = 0;
  ADMIN = 1;
  MANAGER = 2;
}

message GetUsersRequest {
  optional string query = 1;
  int64 limit = 2;
  optional string cursor = 3;
  optional string by_user = 4;
}

message GetUsersResponse {
  repeated FullUser users = 2;
  optional string nextCursor = 3;
}

message GetUserRequest {
  string username = 1;
  optional string by_user = 2;
}

message UpdateUserRequest {
  string id = 1;
  optional string username = 2;
  optional bytes image = 3;
  optional string bio = 4;
  repeated string url = 5;
}

message DeleteUserRequest {
  string user_id = 1;
  string id = 2;
}

message DeleteUserResponse {
  string message = 1;
}

message FollowUserRequest {
  string user_id = 1;
  string target_id = 2;
}

message FollowUserResponse {
  string message = 1;
}

message UnfollowUserRequest {
  string user_id = 1;
  string target_id = 2;
}

message UnfollowUserResponse {
  string message = 1;
}

message FollowersRequest {
  string id = 1;
  int64 limit = 2;
  optional string cursor = 3;
  optional string by_user = 4;
}

message FollowingRequest {
  string id = 1;
  int64 limit = 2;
  optional string cursor = 3;
  optional string by_user = 4;
}

message FollowersResponse {
  repeated FullUser users = 1;
  optional string nextCursor = 2;
}

message FollowingResponse {
  repeated FullUser users = 1;
  optional string nextCursor = 2;
}

service UserService {
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  rpc GetUser(GetUserRequest) returns (FullUser);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc Followers(FollowersRequest) returns (FollowersResponse);
  rpc Following(FollowingRequest) returns (FollowingResponse);
  rpc FollowUser(FollowUserRequest) returns (FollowUserResponse);
  rpc UnfollowUser(UnfollowUserRequest) returns (UnfollowUserResponse);
}

message Article {
  string id = 1;
  string title = 2;
  int32 like_count = 4;
  int32 comment_count = 5;
  google.protobuf.Timestamp created_at = 6;
  optional google.protobuf.Timestamp updated_at = 7;
  optional google.protobuf.Timestamp published_at = 8;
  optional string description = 9;
}

message FullArticle {
  string id = 1;
  string title = 2;
  int32 like_count = 4;
  int32 comment_count = 5;
  google.protobuf.Timestamp created_at = 6;
  optional google.protobuf.Timestamp updated_at = 7;
  optional google.protobuf.Timestamp published_at = 8;
  repeated FullUser users = 9;
  repeated Tag tags = 10;
  optional string content = 11;
  optional string description = 12;
  optional Series series = 13;
  repeated List lists = 14;
}

message ArticleVersion {
  string id = 1;
  string article_id = 2;
  optional string device_id = 3;
  string content = 5;
  google.protobuf.Timestamp created_at = 6;
}

message GetArticlesRequest {
  repeated string usernames = 1;
  repeated string list_id = 2;
  repeated string series_id = 3;
  optional string cursor = 4;
  int64 limit = 5;
  optional string query = 6;
  repeated string not_list_id = 7;
  repeated string not_series_id = 8;
  optional string by_user = 9; 
}

message GetArticlesResponse {
  repeated FullArticle articles = 2;
  optional string nextCursor = 3;
}

message GetArticleRequest {
  string article_id = 1;
  optional string by_user = 2; 
}

message CreateArticleRequest {
  string user_id = 1;
  string title = 2;
  optional string description = 3;
}

message UpdateArticleRequest {
  string user_id = 1;
  string article_id = 2;
  optional string title = 3;
  optional string description = 4;
}

message DeleteArticleRequest {
  string user_id = 1;
  string article_id = 2;
}

message DeleteArticleResponse {
  string message = 1;
}

message AddAuthorRequest {
  string user_id = 1;
  string article_id = 2;
  string author_id = 3;
}

message AddAuthorResponse {
  string message = 1;
}

message RemoveAuthorRequest {
  string user_id = 1;
  string article_id = 2;
  string author_id = 3;
}

message RemoveAuthorResponse {
  string message = 1;
}

message UpdateTagsRequest {
  repeated int32 tags = 1;
  int64 limit = 2;
}

message UpdateTagsResponse {
  string message = 1;
}

message SaveArticleRequest {
  string user_id = 1;
  string article_id = 2;
  string content = 3;
  optional string device_id = 4;
}

message GetHistoryRequest {
  string user_id = 1;
  string article_id = 2;
  optional string query = 3;
  optional string cursor = 4;
  int64 limit = 5;
}

message GetHistoryResponse {
  repeated ArticleVersion article_versions = 2;
  optional string nextCursor = 3;
}

service ArticleService {
  rpc CreateArticle(CreateArticleRequest) returns (Article);
  rpc GetArticles(GetArticlesRequest) returns (GetArticlesResponse);
  rpc GetArticle(GetArticleRequest) returns (FullArticle);
  rpc UpdateArticle(UpdateArticleRequest) returns(Article);
  rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse);
  rpc AddAuthor(AddAuthorRequest) returns (AddAuthorResponse);
  rpc RemoveAuthor(RemoveAuthorRequest) returns (RemoveAuthorResponse);
  rpc UpdateTags(UpdateTagsRequest) returns (UpdateTagsResponse);
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  rpc Save(SaveArticleRequest) returns (ArticleVersion);
}

message List {
  string id = 1;
  string user_id = 2;
  string label = 4;
  optional string image = 5;
  Visibility visibility = 6;
  int32 article_count = 7;
  google.protobuf.Timestamp created_at = 8;
  optional google.protobuf.Timestamp updated_at = 9;
}

enum Visibility {
  PRIVATE = 0;
  PUBLIC = 1;
  BYLINK = 2;
}

message CreateListRequest {
  string user_id = 1;
  string label = 2;
  optional string image = 3;
  Visibility visibility = 4;
}

message GetListsRequest {
  optional string query = 1;
  optional string user_id = 2;
  optional string cursor = 3;
  int64 limit = 4;
}

message GetListsResponse {
  repeated List lists = 2;
  optional string nextCursor = 3;
}

message GetListRequest {
  string list_id = 1;
}

message UpdateListRequest {
  string user_id = 1;
  string list_id = 2;
  optional string label = 3;
  optional string image = 4;
  optional Visibility visibility = 5;
}

message DeleteListRequest {
  string user_id = 1;
  string list_id = 2;
}

message DeleteListResponse {
  string message = 1;
}

message AddArticleListRequest {
  string user_id = 1;
  string list_id = 2;
  string article_id = 3;
}

message AddArticleListResponse {
  string message = 1;
}

message RemoveArticleListRequest {
  string user_id = 1;
  string list_id = 2;
  string article_id = 3;
}

message RemoveArticleListResponse {
  string message = 1;
}

service ListService {
  rpc CreateList(CreateListRequest) returns (List);
  rpc GetLists(GetListsRequest) returns (GetListsResponse);
  rpc GetList(GetListRequest) returns (List);
  rpc UpdateList(UpdateListRequest) returns(List);
  rpc DeleteList(DeleteListRequest) returns (DeleteListResponse);
  rpc AddArticle(AddArticleListRequest) returns (AddArticleListResponse);
  rpc RemoveArticle(RemoveArticleListRequest) returns (RemoveArticleListResponse);
}

message Series {
  string id = 1;
  string user_id = 2;
  string label = 4;
  optional string image = 5;
  int32 article_count = 6;
  google.protobuf.Timestamp created_at = 7;
  optional google.protobuf.Timestamp updated_at = 8;
}

message CreateSeriesRequest {
  string user_id = 1;
  string label = 2;
  optional string image = 3;
}

message GetSeriesesRequest {
  optional string query = 1;
  optional string user_id = 2;
  optional string cursor = 3;
  int64 limit = 4;
}

message GetSeriesesResponse {
  repeated Series series = 2;
  optional string nextCursor = 3;
}

message GetSeriesRequest {
  string series_id = 1;
}

message UpdateSeriesRequest {
  string user_id = 1;
  string series_id = 2;
  optional string label = 3;
  optional string image = 4;
}

message DeleteSeriesRequest {
  string user_id = 1;
  string series_id = 2;
}

message DeleteSeriesResponse {
  string message = 1;
}

message AddArticleSeriesRequest {
  string user_id = 1;
  string series_id = 2;
  string article_id = 3;
}

message AddArticleSeriesResponse {
  string message = 1;
}

message RemoveArticleSeriesRequest {
  string user_id = 1;
  string series_id = 2;
  string article_id = 3;
}

message RemoveArticleSeriesResponse {
  string message = 1;
}

service SeriesService {
  rpc CreateSeries(CreateSeriesRequest) returns (Series);
  rpc GetSerieses(GetSeriesesRequest) returns (GetSeriesesResponse);
  rpc GetSeries(GetSeriesRequest) returns (Series);
  rpc UpdateSeries(UpdateSeriesRequest) returns (Series);
  rpc DeleteSeries(DeleteSeriesRequest) returns (DeleteSeriesResponse);
  rpc AddArticle(AddArticleSeriesRequest) returns (AddArticleSeriesResponse);
  rpc RemoveArticle(RemoveArticleSeriesRequest) returns (RemoveArticleSeriesResponse);
}

message Comment {
  string id = 1;
  string content = 2;
  string commenter_id = 3;
  string target_id = 4;
  CommentableType type = 5;
  google.protobuf.Timestamp created_at = 7;
  optional google.protobuf.Timestamp updated_at = 8;
}

enum CommentableType {
  ARTICLE = 0;
  LIST = 1;
  SERIES = 2;
}

message CreateCommentRequest {
  string user_id = 1;
  string target_id = 2;
  string content = 3;
  CommentableType type = 4;
}

message GetCommentsRequest {
  string target_id = 1;
  CommentableType type = 2;
  optional string user_id = 3;
  optional string cursor = 4;
  int64 limit = 5;
  optional string query = 6;
}

message GetCommentsResponse {
  repeated Comment comments = 2;
  optional string nextCursor = 3;
}

message UpdateCommentRequest {
  string user_id = 1;
  string comment_id = 2;
  optional string content = 3;
}

message DeleteCommentRequest {
  string user_id = 1;
  string comment_id = 2;
}

message DeleteCommentResponse {
  string message = 1;
}

service CommentService {
  rpc CreateComment(CreateCommentRequest) returns (Comment);
  rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse);
  rpc UpdateComment(UpdateCommentRequest) returns (Comment);
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse);
}

message Tag {
  string label = 2;
  string slug = 3;
  int32 article_count = 4;
  TagStatus tag_status = 5;
  google.protobuf.Timestamp created_at = 6;
  optional google.protobuf.Timestamp updated_at = 7;
}

enum TagStatus {
  APPROVED = 0;
  BANNED = 1;
  WAITING = 2;
}


message GetTagsRequest {
  optional TagStatus tag_status = 1;
  optional string user_id = 2;
  optional string article_id = 3;
  optional string cursor = 4;
  int64 limit = 5;
  optional string query = 6;
}

message GetTagsResponse {
  repeated Tag tags = 1;
  optional string nextCursor = 2;
}

service TagService {
  rpc GetTags(GetTagsRequest) returns (GetTagsResponse);
}
